<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--Base Button Style-->
    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{StaticResource SecondaryBrush}"/>
        <Setter Property="MinHeight" Value="{StaticResource MinHeight}"/>
        <Setter Property="Padding" Value="{StaticResource SmallPadding}"/>
        <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="{StaticResource SmallCornerRadius}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   TextAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   Style="{StaticResource SecondaryTextBlock}"
                                   TextWrapping="WrapWithOverflow"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryLightBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource SecondaryDarkBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Target Picker Main Button -->
    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}"
           x:Key="TargetPickerButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="0.7" ScaleY="0.7"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{StaticResource PrimaryHeaderTextBlock}"
                                   FontWeight="Bold"
                                   TextWrapping="Wrap"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryLightBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Target Picker Reset Button -->
    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource TargetPickerButton}"
           x:Key="TargetPickerResetButton">
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource ErrorBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Red"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Round Lobby Role Item Button -->
    <Style x:Key="RoleItemButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinHeight" Value="{StaticResource MinItemHeight}"/>
        <Setter Property="MinWidth" Value="{StaticResource MinItemHeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="{StaticResource RoundRadius}"
                            Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   Style="{StaticResource SecondaryTextBlock}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Lobby Player Item Button -->
    <Style x:Key="PlayerItemButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinHeight" Value="{StaticResource MinItemHeight}"/>
        <Setter Property="MinWidth" Value="{StaticResource MinItemHeight}"/>
        <Setter Property="Foreground" Value="{StaticResource OnSecondaryBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="{StaticResource SmallCornerRadius}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   Style="{StaticResource SecondaryTextBlock}"
                                   Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Ready Button -->
    <Style x:Key="ReadyButton"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding CanRun}" Value="True">
                <Setter Property="Background" Value="{StaticResource GreenBrush}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    <Condition Binding="{Binding CanRun}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource GreenLightBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Ready Toggle Button -->
    <Style x:Key="ReadyToggleButton"
           TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="{StaticResource SecondaryBrush}"/>
        <Setter Property="MinHeight" Value="{StaticResource MinHeight}"/>
        <Setter Property="Padding" Value="{StaticResource SmallPadding}"/>
        <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="{StaticResource SmallCornerRadius}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Text="{TemplateBinding Content}"
                                   Style="{StaticResource PrimaryHeaderTextBlock}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryLightBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource GreenBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource SecondaryDarkBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource GreenLightBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Window Control Button -->
    <Style BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}"
           x:Key="WindowControlButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryDarkBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Close Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowCloseButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Main Menu Button-->
    <Style BasedOn="{StaticResource {x:Type Button}}"
		   TargetType="{x:Type Button}"
		   x:Key="MainMenuButtonTheme">
        <Style.Setters>
            <Setter Property="Height" Value="45"/>
            <Setter Property="Width" Value="45"/>
            <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
            <Setter Property="Padding" Value="{StaticResource SmallPadding}"/>
            <Setter Property="Margin" Value="2, 1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                CornerRadius="{StaticResource SmallCornerRadius}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryDarkBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>